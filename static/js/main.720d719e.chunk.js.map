{"version":3,"sources":["components/Scrollable/Scrollable.module.css","components/StaticLayoutGrid/StaticLayoutGrid.module.css","components/Button/Button.module.css","utils/cn.ts","utils/shim.ts","components/Scrollable/ScrollBar.tsx","components/Scrollable/Scrollable.tsx","components/StaticLayoutGrid/StaticLayoutGridHead.tsx","components/StaticLayoutGrid/StaticLayoutGridBody.tsx","components/StaticLayoutGrid/StaticLayoutGrid.tsx","utils/palette.ts","components/Button/Button.tsx","components/TextField/TextField.tsx","examples/StaticLayoutGrid/StaticLayoutGridDemo.tsx","examples/Demo.tsx","App.tsx","index.tsx","components/TextField/TextField.module.css","examples/StaticLayoutGrid/StaticLayoutGridDemo.module.css","components/StaticLayoutGrid/StaticLayoutGridHead.module.css","examples/Demo.module.css","components/Scrollable/ScrollBar.module.css","components/StaticLayoutGrid/StaticLayoutGridBody.module.css"],"names":["module","exports","cn","result","classNames","forEach","item","push","Object","keys","map","key","join","requestIdleCallback","window","callback","options","start","Date","now","setTimeout","didTimeout","timeRemaining","Math","max","cancelIdleCallback","handleMove","eventPosition","instance","props","positionPx","size","anchorPercentage","availablePx","maxPosition","minPosition","percentage","limitedPercentage","setPosition","onScroll","axis","timeout","thumb","current","style","transform","toggleBrowserSelection","disabled","document","body","userSelect","msUserSelect","ScrollBar","thumbStyle","styles","Thumb","Horizontal","Vertical","React","initial","dimensions","parentElement","getBoundingClientRect","left","top","width","height","handleMouseMove","event","clientX","clientY","handleMouseUp","removeEventListener","handleMouseDown","currentTarget","addEventListener","dragPosition","thumbPositionPx","handleTouchStart","handleTouchEnd","handleTouchMove","targetTouches","preventDefault","ref","className","onMouseDown","onTouchStart","getThumbSize","visiblePx","scrollablePx","requiredSize","Scrollable","Container","children","scrollableWidth","initialX","scrollableHeight","initialY","alignCenter","textAlign","alignRight","StaticLayoutGridHead","visibleColumns","columns","slice","firstVisibleColumn","visibleColumnsCount","Table","column","minWidth","maxWidth","Row","index","align","Column","Label","label","undefined","StaticLayoutGridBody","visibleItems","items","firstVisibleRow","visibleRowsCount","row","cIndex","renderer","value","rowIndex","rowHeight","getFirstVisibleCount","totalWidth","rightWidth","requiredWidth2","requiredColumn","i","length","StaticLayoutGrid","EColors","setColumns","setFirstVisibleRow","setFirstVisibleColumn","setInitialY","setInitialX","containerWidth","setContainerWidth","setRightWidth","percentageY","percentageX","container","contentWidth","reduce","localRightWidth","pek","maxFirstVisibleColumn","clientWidth","requiredContainerHeight","min","contentHeight","handleScroll","padding","requiredHeight","ceil","maxColumns","requiredWidth","theme","primaryColor","blueGrey","secondaryColor","white","backgroundColor","darkGrey","surfaceColor","shade","overlayColor","opacity","startsWith","Error","hexToRgb","primaryR","r","primaryG","g","primaryB","b","overlayR","overlayG","overlayB","linearInterpolation","hex","Number","parseInt","value1","value2","alpha","ButtonTypes","Button","buttonType","type","contained","initialStyle","color","setStyle","hoverColor","onMouseEnter","onMouseLeave","onClick","TextField","focused","setFocused","borderColor","containerStyle","LabelPlaceholder","Input","Filled","maxLength","onFocus","onBlur","onChange","Underline","ActivationIndicator","colors","gridData","green","indigo","blue","brown","deepOrange","red","initialRandomizedData","getRandomizedData","cellRenderer","Cell","Index","borderTop","getRandomizedColumns","charCodeAt","colorIndex","floor","random","String","fromCharCode","rows","getRandomBatch","batch","batches","leftover","concat","StaticLayoutGridDemo","rowsInput","setRowsInput","setRows","visibleRows","randomizedData","setRandomizedData","handleRandomize","handleRowsChange","e","newValue","isNaN","handleApply","Controls","Demo","component","Content","Section","ComponentTitle","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.720d719e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Scrollable_Container__2bTpV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"StaticLayoutGrid_Container__31qWJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R1xi\"};","/* Simplified JedWatson/classnames (https://github.com/JedWatson/classnames) */\n\ninterface IClassNamesDefinition {\n    [className: string]: boolean\n}\n\n/**\n * Build className string using conditional expressions.\n *\n * cn('button') -> 'button'  \n * cn('button', { red: false, green: true }), 'large') -> 'button green large'  \n *\n * @param classNames String or { [className]: condition } dictionary\n * @returns Joined className string\n */\nfunction cn(...classNames: Array<string | IClassNamesDefinition>) {\n    const result: string[] = []\n    classNames.forEach((item) => {\n        if (typeof item === 'string') {\n            result.push(item)\n        } else {\n            Object.keys(item).map((key) => {\n                if (item[key]) {\n                    result.push(key)\n                }\n            })\n        }\n    })\n    return result.join(' ')\n}\n\nexport default cn\n","/**\n * IE11 polyfill for requestIdleCallback\n *\n * @see https://developers.google.com/web/updates/2015/08/using-requestidlecallback\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\n */\nexport type RequestIdleCallback = (\n    callback: RequistIdleCallbackFunction,\n    options?: IRequestIdleCallbackOptions\n) => number\nexport type RequistIdleCallbackFunction = (args?: IdleDeadline) => void\n\nexport interface IRequestIdleCallbackOptions {\n    timeout: number\n}\n\nexport interface IdleDeadline {\n    didTimeout: boolean,\n    timeRemaining: () => number\n}\n\nfunction ie11RequestIdleCallback(callback: RequistIdleCallbackFunction, options?: IRequestIdleCallbackOptions) {\n    const start = Date.now()\n    return setTimeout(() => {\n        callback({\n            didTimeout: false,\n            timeRemaining: () => Math.max(0, 50 - (Date.now() - start))\n        })\n    }, 1)\n}\n\nfunction ie11CancelIdleCallback(id: number) {\n    window.clearTimeout(id)\n}\n\nexport const requestIdleCallback: RequestIdleCallback = (window as any).requestIdleCallback || ie11RequestIdleCallback\nexport const cancelIdleCallback = (window as any).cancelIdleCallback || ie11CancelIdleCallback\n","import * as React from 'react'\nimport cn from '../../utils/cn'\nimport {requestIdleCallback} from '../../utils/shim'\nimport styles from './ScrollBar.module.css'\n\nexport interface IScrollEventBase { axis: 'x' | 'y' }\nexport interface IMouseScrollEvent extends IScrollEventBase {\n    percentage: number\n}\nexport interface IKeyboardScrollEvent extends IScrollEventBase {\n    direction: 'forward' | 'backward',\n    page?: boolean\n}\nexport interface IConsoleScrollEvent extends IScrollEventBase {\n    index: number\n}\nexport type ScrollEvent = IMouseScrollEvent | IKeyboardScrollEvent | IConsoleScrollEvent\n\ninterface IScrollBarProps {\n    axis: 'x' | 'y',\n    initial: number,\n    size: number,\n    onScroll?: (event: IMouseScrollEvent) => void\n}\n\ninterface IScrollBarInstance {\n    thumb: React.RefObject<HTMLDivElement>,\n    anchorPercentage: number,\n    percentage: number,\n    minPosition: number,\n    maxPosition: number,\n}\n\nfunction ScrollBar(props: IScrollBarProps) {\n    const thumbStyle = cn(styles.Thumb, {\n        [styles.Horizontal]: props.axis === 'x',\n        [styles.Vertical]: props.axis === 'y'\n    })\n    const instance = React.useRef<IScrollBarInstance>({\n        thumb: React.useRef<HTMLDivElement>(null),\n        anchorPercentage: 0, percentage: props.initial || 0,\n        minPosition: 0, maxPosition: 0\n    }).current\n    React.useEffect(() => {\n        if (instance.thumb.current) {\n            const dimensions = instance.thumb.current.parentElement?.getBoundingClientRect() ?? { left: 0, top: 0, width: 0, height: 0}\n            instance.minPosition = props.axis === 'x'\n                ? dimensions.left\n                : dimensions.top\n            instance.maxPosition = instance.minPosition - props.size\n                + (props.axis === 'x' ? dimensions.width : dimensions.height)\n        }\n    }, [instance.thumb.current, props.size, props.initial])\n    React.useEffect(() => {\n        setPosition(props.initial, instance, props)\n    }, [props.initial, props.size])\n    const handleMouseMove = React.useCallback((event: MouseEvent) => {\n        handleMove(props.axis === 'x' ? event.clientX : event.clientY, instance, props)\n    }, [props])\n    const handleMouseUp = (event: MouseEvent) => {\n        toggleBrowserSelection(false)\n        window.removeEventListener('mousemove', handleMouseMove, true)\n    }\n    const handleMouseDown = React.useCallback((event: React.MouseEvent<HTMLDivElement>) => {\n        toggleBrowserSelection(true)\n        const container = event.currentTarget.parentElement\n        window.addEventListener('mouseup', handleMouseUp, true)\n        window.addEventListener('mousemove', handleMouseMove, true)\n        const dragPosition = props.axis === 'x' ? event.clientX : event.clientY\n        const thumbPositionPx = instance.percentage * (instance.maxPosition - instance.minPosition)\n        instance.anchorPercentage = (dragPosition - instance.minPosition - thumbPositionPx) / props.size\n    }, [props])\n\n    const handleTouchStart = React.useCallback((event: React.TouchEvent<HTMLDivElement>) => {\n        toggleBrowserSelection(true)\n        const container = event.currentTarget.parentElement\n        window.addEventListener('touchend', handleTouchEnd, true)\n        window.addEventListener('touchmove', handleTouchMove, true)\n        const dragPosition = props.axis === 'x' ? event.targetTouches[0].clientX : event.targetTouches[0].clientY\n        const thumbPositionPx = instance.percentage * (instance.maxPosition - instance.minPosition)\n        instance.anchorPercentage = (dragPosition - instance.minPosition - thumbPositionPx) / props.size\n    }, [props])\n\n    const handleTouchEnd = React.useCallback(() => {\n        toggleBrowserSelection(false)\n        window.removeEventListener('touchmove', handleTouchMove, true)\n    }, [props])\n\n    const handleTouchMove = React.useCallback((event: TouchEvent) => {\n        event.preventDefault()\n        const eventPosition = props.axis === 'x' ? event.targetTouches[0].clientX : event.targetTouches[0].clientY\n        handleMove(eventPosition, instance, props)\n    }, [props])\n\n    return <div\n        ref={instance.thumb}\n        className={thumbStyle}\n        style={{ [props.axis === 'x' ? 'width' : 'height']: props.size }}\n        onMouseDown={handleMouseDown}\n        onTouchStart={handleTouchStart}\n\n    />\n}\n\nfunction handleMove(eventPosition: number, instance: IScrollBarInstance, props: IScrollBarProps) {\n    const anchorDelta = (props.size * instance.anchorPercentage)\n    const positionPx = eventPosition - anchorDelta\n    const availablePx = (instance.maxPosition - instance.minPosition)\n    const percentage = (positionPx - instance.minPosition) / availablePx\n    const limitedPercentage = percentage < 0\n        ? 0\n        : percentage > 1\n            ? 1\n            : percentage\n    setPosition(limitedPercentage, instance, props)\n    requestIdleCallback(() => {\n        if (props.onScroll) {\n            props.onScroll({ axis: props.axis, percentage: limitedPercentage })\n        }\n    }, { timeout: 30 })\n}\n\nfunction setPosition(percentage: number, instance: IScrollBarInstance, props: IScrollBarProps) {\n    const availablePx = (instance.maxPosition - instance.minPosition) > 0\n        ? instance.maxPosition - instance.minPosition\n        : 0\n    instance.percentage = percentage\n    if (!instance.thumb.current) {\n        return\n    }\n    instance.thumb.current.style.transform = props.axis === 'x'\n            ? `translate3d(${percentage * availablePx}px, 0px, 0px)`\n            : `translate3d(0px, ${percentage * availablePx}px, 0px)`\n}\n\nfunction toggleBrowserSelection(disabled: boolean) {\n    window.document.body.style.userSelect = disabled ? 'none' : '';\n    (window.document.body.style as any).msUserSelect = disabled ? 'none' : null\n}\n\nexport default ScrollBar\n","import * as React from 'react'\nimport ScrollBar, { IMouseScrollEvent } from './ScrollBar'\nimport styles from './Scrollable.module.css'\n\ninterface IScrollableProps {\n    children: React.ReactNode,\n    width: number,\n    height: number,\n    scrollableWidth: number,\n    scrollableHeight: number,\n    initialX?: number,\n    initialY?: number\n    onScroll?: (event: IMouseScrollEvent) => void\n}\n\nconst defaultThumbThickness = 15\nconst minThumbSize = 48\n\nfunction Scrollable(props: IScrollableProps) {\n    return (\n        <section className={styles.Container}>\n            {props.children}\n            { props.scrollableWidth > props.width &&\n                <ScrollBar\n                    axis=\"x\"\n                    initial={props.initialX ?? 0}\n                    size={getThumbSize(props.width, props.scrollableWidth)}\n                    onScroll={props.onScroll}\n                />\n            }\n            { props.scrollableHeight > props.height &&\n                <ScrollBar\n                    axis=\"y\"\n                    initial={props.initialY ?? 0}\n                    size={getThumbSize(props.height, props.scrollableHeight)}\n                    onScroll={props.onScroll}\n                />\n            }\n        </section>\n    )\n}\n\nfunction getThumbSize(visiblePx: number, scrollablePx: number) {\n    const requiredSize = (visiblePx - defaultThumbThickness) / scrollablePx * (visiblePx - defaultThumbThickness)\n    return requiredSize > minThumbSize ? requiredSize : minThumbSize\n}\n\nexport default Scrollable\n","import * as React from 'react'\nimport styles from './StaticLayoutGridHead.module.css'\n\nexport interface ICell {\n    value: any,\n    column: IColumn,\n    rowIndex: number\n}\n\nexport interface IColumn {\n    key: string,\n    label?: string,\n    width?: number,\n    align?: 'left' | 'center' | 'right',\n    renderer: (props: any) => JSX.Element,\n    [customProperty: string]: any\n}\n\ninterface IStaticLayoutGridHeadProps {\n    columns: IColumn[],\n    firstVisibleColumn: number,\n    visibleColumnsCount: number\n}\n\nconst alignCenter: React.CSSProperties = { textAlign: 'center' }\nconst alignRight: React.CSSProperties = { textAlign: 'right' }\n\nfunction StaticLayoutGridHead(props: IStaticLayoutGridHeadProps) {\n    const visibleColumns = props.columns.slice(\n        props.firstVisibleColumn,\n        props.firstVisibleColumn + props.visibleColumnsCount\n    )\n    return (\n        <div className={styles.Container}>\n            <table className={styles.Table}>\n                <colgroup>\n                    {visibleColumns.map(column =>\n                        <col\n                            key={column.key}\n                            style={{\n                                width: column.width,\n                                minWidth: column.width,\n                                maxWidth: column.width\n                            }}\n                        />\n                    )}\n                </colgroup>\n                <thead>\n                    <tr className={styles.Row}>\n                        {visibleColumns.map((column, index) => {\n                            let align\n                            align = column.align === 'center' ? alignCenter : align\n                            align = column.align === 'right' ? alignRight : align\n                            return <th\n                                key={column.key !== undefined ? column.key : index}\n                                className={styles.Column}\n                                style={align}\n                            >\n                                <span className={styles.Label}>\n                                    {column.label || column.key }\n                                </span>\n                            </th>\n                        })}\n                    </tr>\n                </thead>\n            </table>\n        </div>\n    )\n}\n\nexport default StaticLayoutGridHead\n","import * as React from 'react'\nimport { IColumn } from './StaticLayoutGridHead'\nimport styles from './StaticLayoutGridBody.module.css'\n\ninterface IStaticLayoutGridBodyProps {\n    items: any[],\n    columns: IColumn[],\n    visibleRowsCount: number,\n    visibleColumnsCount: number,\n    firstVisibleRow: number,\n    firstVisibleColumn: number\n}\n\nfunction StaticLayoutGridBody(props: IStaticLayoutGridBodyProps) {\n    const visibleItems = props.items.slice(props.firstVisibleRow, props.firstVisibleRow + props.visibleRowsCount)\n    const visibleColumns = props.columns.slice(\n        props.firstVisibleColumn,\n        props.firstVisibleColumn + props.visibleColumnsCount\n    )\n    return (\n        <div className={styles.Container}>\n            <table className={styles.Table}>\n                <colgroup>\n                    {visibleColumns.map(column =>\n                        <col\n                            key={column.key}\n                            style={{\n                                width: column.width,\n                                minWidth: column.width,\n                                maxWidth: column.width\n                            }}\n                        />\n                    )}\n                </colgroup>\n                <tbody>\n                    {visibleItems.map((row, index) =>\n                        <tr className={styles.Row} key={index}>\n                            {visibleColumns.map((column, cIndex) => {\n                                return column.renderer({ value: row[column.key], column, rowIndex: index })\n                            })}\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default StaticLayoutGridBody\n","import * as React from 'react'\nimport Scrollable from '../Scrollable/Scrollable'\nimport {IMouseScrollEvent} from '../Scrollable/ScrollBar'\nimport Head, { IColumn } from './StaticLayoutGridHead'\nimport Body from './StaticLayoutGridBody'\nimport styles from './StaticLayoutGrid.module.css'\n\ninterface IStaticLayoutGridProps {\n    columns: IColumn[],\n    items: any[],\n    visibleRowsCount: number\n}\n\nconst rowHeight = 48\n\nfunction getFirstVisibleCount(percentage: number, totalWidth: number, columns: IColumn[], rightWidth: number) {\n    const requiredWidth = percentage * (totalWidth - rightWidth)\n    let requiredWidth2 = requiredWidth\n    let requiredColumn = 0\n    for (let i = 0; i < columns.length; i++) {\n        requiredWidth2 -= columns[i].width ?? 0\n        if (requiredWidth2 < 0) {\n            requiredColumn = i\n            break\n        }\n    }\n    return requiredColumn\n}\n\nfunction StaticLayoutGrid(props: IStaticLayoutGridProps) {\n    const [columns, setColumns] = React.useState(props.columns)\n    React.useEffect(() => {\n        setColumns(props.columns)\n    }, [props.columns])\n\n    const [firstVisibleRow, setFirstVisibleRow] = React.useState(0)\n    const [firstVisibleColumn, setFirstVisibleColumn] = React.useState(0)\n    const [initialY, setInitialY] = React.useState(0)\n    const [initialX, setInitialX] = React.useState(0)\n    const [containerWidth, setContainerWidth] = React.useState(0)\n    const [rightWidth, setRightWidth] = React.useState(0)\n    const percentageY = React.useRef(initialY)\n    const percentageX = React.useRef(initialX)\n    const container = React.useRef<HTMLDivElement>(null)\n    const contentWidth = columns.reduce((width, item) => width + (item.width || 0), 0)\n    React.useLayoutEffect(() => {\n        let localRightWidth = 0\n        let pek = containerWidth\n        let maxFirstVisibleColumn = columns.length - 1\n        while (maxFirstVisibleColumn > 0) {\n            pek -= columns[maxFirstVisibleColumn].width ?? 0\n            localRightWidth += columns[maxFirstVisibleColumn].width ?? 0\n            maxFirstVisibleColumn--\n            if (pek - (columns[maxFirstVisibleColumn].width ?? 0) < 0) {\n                break\n            }\n        }\n        setContainerWidth(container.current ? container.current.clientWidth : 0)\n        setRightWidth(localRightWidth)\n    }, [container.current && container.current.clientWidth])\n\n    const requiredContainerHeight = Math.min(props.items.length, props.visibleRowsCount) * rowHeight\n    const contentHeight = props.items.length * rowHeight\n    const handleScroll = React.useCallback((event: IMouseScrollEvent) => {\n        if (event.axis === 'y') {\n            const padding = props.items.length - props.visibleRowsCount > 0\n                ? props.visibleRowsCount * rowHeight\n                : 0\n            percentageY.current = event.percentage\n            const requiredHeight = event.percentage * (props.items.length * rowHeight - padding)\n            const row = Math.ceil(requiredHeight / rowHeight)\n            setFirstVisibleRow(row)\n        }\n        if (event.axis === 'x') {\n            percentageX.current = event.percentage\n            const requiredColumn = getFirstVisibleCount(event.percentage, contentWidth, columns, rightWidth)\n            setFirstVisibleColumn(requiredColumn)\n        }\n    }, [props.items.length, props.visibleRowsCount, rightWidth])\n    React.useLayoutEffect(() => {\n        const newContainerWidth = container.current && container.current.clientWidth || 0\n        setInitialX(percentageX.current)\n        const requiredColumn = getFirstVisibleCount(percentageX.current, contentWidth, columns, rightWidth)\n        setFirstVisibleColumn(requiredColumn)\n    }, [container.current, rightWidth])\n    React.useLayoutEffect(() => {\n        setInitialY(percentageY.current)\n        const padding = props.items.length - props.visibleRowsCount > 0\n                ? props.visibleRowsCount * rowHeight\n                : 0\n        const requiredHeight = percentageY.current * (props.items.length * rowHeight - padding)\n        const row = Math.ceil(requiredHeight / rowHeight)\n        setFirstVisibleRow(row)\n\n    }, [props.items.length, props.visibleRowsCount, containerWidth])\n    let maxColumns = 0\n    let requiredWidth = 0\n    for (let i = firstVisibleColumn; i < columns.length && requiredWidth < containerWidth; i++) {\n        requiredWidth += columns[i].width ?? 0\n        maxColumns++\n    }\n    return (\n        <div ref={container} className={styles.Container}>\n            <Head columns={columns} firstVisibleColumn={firstVisibleColumn} visibleColumnsCount={maxColumns} />\n            <Scrollable\n                initialX={initialX}\n                initialY={initialY}\n                width={containerWidth}\n                height={requiredContainerHeight}\n                scrollableWidth={contentWidth}\n                scrollableHeight={contentHeight}\n                onScroll={handleScroll}\n            >\n                <Body\n                    columns={columns}\n                    items={props.items}\n                    visibleRowsCount={props.visibleRowsCount}\n                    visibleColumnsCount={maxColumns}\n                    firstVisibleRow={firstVisibleRow}\n                    firstVisibleColumn={firstVisibleColumn}\n                />\n            </Scrollable>\n        </div>\n    )\n}\n\nexport default StaticLayoutGrid\n","export enum EColors {\n    white = '#FFFFFF',\n    red = '#EF5350', // 400\n    indigo = '#3F51B5',\n    deepOrange = '#FF5722',\n    purple = '#9C27B0',\n    deepPurple = '#673AB7',\n    pink = '#E91E63',\n    blueGrey = '#607D8B',\n    blueGrey400 = '#78909C',\n    blueGrey600 = '#546E7A',\n    blueGrey700 = '#455A64',\n    blue = '#1F75D1',\n    lightBlue = '#2695F3',\n    green = '#4CAF50',\n    lightGreen = '#8BC34A',\n    brown = '#795548',\n    grey = '#9E9E9E',\n    darkGrey = '#252526'\n}\n\n// Theme context?\nexport const theme = {\n    primaryColor: EColors.blueGrey,\n    secondaryColor: EColors.white,\n    backgroundColor: EColors.darkGrey,\n    surfaceColor: EColors.darkGrey\n}\n\n/**\n * Blend two colors together (lerp).\n * Input colors format is hexadecimal w/o alpha, output colors format is rgb().\n */\nexport function shade(primaryColor: string, overlayColor: string, opacity: number) {\n    const incorrectFormat = !primaryColor.startsWith('#') || !overlayColor.startsWith('#')\n        || primaryColor.length !== 7 || overlayColor.length !== 7\n    if (incorrectFormat) {\n        throw Error('Incorrect color conversion; #ffffff format expected')\n    }\n    const { r: primaryR, g: primaryG, b: primaryB } = hexToRgb(primaryColor)\n    const { r: overlayR, g: overlayG, b: overlayB } = hexToRgb(overlayColor)\n    const r = linearInterpolation(primaryR, overlayR, opacity)\n    const g = linearInterpolation(primaryG, overlayG, opacity)\n    const b = linearInterpolation(primaryB, overlayB, opacity)\n    return `rgb(${r}, ${g}, ${b})`\n}\n\nfunction hexToRgb(hex: string) {\n    return {\n        r: Number.parseInt(`${hex[1] + hex[2]}`, 16),\n        g: Number.parseInt(`${hex[3] + hex[4]}`, 16),\n        b: Number.parseInt(`${hex[5] + hex[6]}`, 16)\n    }\n}\n\nfunction linearInterpolation(value1: number, value2: number, alpha: number) {\n    return (1 - alpha) * value1 + alpha * value2\n}\n","import * as React from 'react'\nimport {EColors, shade, theme} from '../../utils/palette'\nimport cn from '../../utils/cn'\nimport styles from './Button.module.css'\n\nenum ButtonTypes {\n    text,\n    outlined,\n    contained\n}\n\ninterface IButtonProps {\n    children: React.ReactNode,\n    primaryColor?: EColors | string,\n    secondaryColor?: EColors | string,\n    hoverColor?: EColors | string,\n    type?: ButtonTypes,\n    style?: React.CSSProperties,\n    className?: string,\n    onClick?: () => void\n}\n\nconst Button = (props: IButtonProps) => {\n    const primaryColor = props.primaryColor || theme.primaryColor\n    const secondaryColor = props.secondaryColor || theme.secondaryColor\n    const buttonType = props.type || ButtonTypes.contained\n    const initialStyle = {\n        backgroundColor: buttonType === ButtonTypes.contained ? primaryColor : 'transparent',\n        color: buttonType !== ButtonTypes.contained ? primaryColor : secondaryColor,\n        ...props.style\n    }\n    const [style, setStyle] = React.useState(initialStyle)\n    const hoverColor = shade(primaryColor, secondaryColor, 0.08)\n\n    // TODO: JSS support required for pseudo selectors inlining\n    const handleMouseEnter = () => setStyle({ ...style, backgroundColor: hoverColor })\n    const handleMouseLeave = () => setStyle(initialStyle)\n\n    return <button\n        className={cn(styles.Button, props.className ?? '')}\n        style={style}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={props.onClick}\n    >\n        {props.children}\n    </button>\n}\n\nexport default Button\n","import * as React from 'react'\nimport cn from '../../utils/cn'\nimport { EColors, theme, shade } from '../../utils/palette'\nimport styles from './TextField.module.css'\n\ninterface ITextFieldProps {\n    focused?: boolean,\n    value?: string | number | string[],\n    maxLength?: number,\n    label?: string,\n    type?: 'transparent' | 'filled' | 'outlined',\n    primaryColor?: EColors | string,\n    secondaryColor?: EColors | string,\n    className?: string,\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nfunction TextField(props: ITextFieldProps) {\n    const [focused, setFocused] = React.useState(props.focused)\n    const type = props.type || 'transparent'\n    const primaryColor = props.primaryColor || theme.primaryColor\n    const borderColor = shade(theme.surfaceColor, props.secondaryColor || theme.secondaryColor, 0.7)\n    const containerStyle = {\n        backgroundColor: type === 'filled'\n            ? shade(theme.surfaceColor, props.secondaryColor || theme.secondaryColor, 0.04)\n            : undefined,\n        borderColor\n    }\n    const style = {\n        color: props.secondaryColor || theme.secondaryColor,\n    }\n\n    const handleFocus = () => {\n        setFocused(true)\n    }\n\n    const handleBlur = () => {\n        setFocused(false)\n    }\n\n    const value = props.value === null ? '' : props.value\n    return <div\n        className={cn(styles.Container, props.className ?? '')}\n        style={containerStyle}\n    >\n        { props.label &&\n            <span\n                className={cn(styles.Label, { [styles.LabelPlaceholder]: !props.value })}\n                style={{\n                    color: focused ? primaryColor : borderColor\n                }}\n            >\n                {props.label}\n            </span>\n        }\n        <input\n            className={cn(styles.Input, { [styles.Filled]: !!type })}\n            value={value}\n            maxLength={props.maxLength}\n            style={style}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            onChange={props.onChange}\n        />\n        <div\n            className={styles.Underline}\n            style={{ backgroundColor: borderColor, }}\n        />\n        <div\n            className={styles.ActivationIndicator}\n            style={{\n                backgroundColor: primaryColor,\n                transform: focused ? 'none' : 'scaleX(0)'\n            }}\n        />\n    </div>\n}\n\nexport default TextField\n","import * as React from 'react'\nimport StaticLayoutGrid from '../../components/StaticLayoutGrid/StaticLayoutGrid'\nimport { IColumn, ICell } from '../../components/StaticLayoutGrid/StaticLayoutGridHead'\nimport Button from '../../components/Button/Button'\nimport TextField from '../../components/TextField/TextField'\nimport * as gridData from '../data/responsiveBreakpoints.json'\nimport styles from './StaticLayoutGridDemo.module.css'\nimport cn from '../../utils/cn'\nimport {EColors} from '../../utils/palette'\n\ninterface IDataItem {\n    [key: string]: any\n}\n\nconst data = gridData.data as IDataItem[]\n\nconst colors = [\n    EColors.green, EColors.indigo, EColors.blue, EColors.blueGrey, EColors.brown,\n    EColors.deepOrange, EColors.red\n]\nconst alignCenter: React.CSSProperties = { textAlign: 'center' }\nconst alignRight: React.CSSProperties = { textAlign: 'right' }\n\nconst initialRandomizedData = getRandomizedData(100)\n\nfunction StaticLayoutGridDemo() {\n    const [rowsInput, setRowsInput] = React.useState<number | undefined>(100)\n    const [rows, setRows] = React.useState<number | undefined>(100)\n    const [visibleRows, setVisibleRows] = React.useState(14)\n    const [columns, setColumns] = React.useState(getRandomizedColumns())\n    const [randomizedData, setRandomizedData] = React.useState<IDataItem[]>(initialRandomizedData)\n\n    const handleRandomize = React.useCallback(() => {\n        setColumns(getRandomizedColumns())\n        setRandomizedData(getRandomizedData(rowsInput ?? 0))\n    }, [rowsInput])\n\n    const handleRowsChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = Number.parseInt(e.currentTarget.value, 10)\n        setRowsInput(Number.isNaN(newValue) ? undefined : newValue)\n    }, [setRows])\n\n    const handleApply = React.useCallback(() => {\n        setRows(rowsInput)\n        setRandomizedData(getRandomizedData(rowsInput ?? 0))\n    }, [rowsInput])\n\n    return <section>\n        <div className={styles.Controls}>\n            <TextField\n                className={styles.TextField}\n                label=\"Rows\"\n                maxLength={5}\n                value={rowsInput}\n                onChange={handleRowsChange}\n            />\n            <Button onClick={handleApply} className={styles.Button}>\n                Apply\n            </Button>\n            <Button onClick={handleRandomize} className={styles.Button}>\n                Randomize\n            </Button>\n        </div>\n        <StaticLayoutGrid\n            columns={columns}\n            items={randomizedData}\n            visibleRowsCount={visibleRows}\n        />\n    </section>\n}\n\nfunction cellRenderer(props: ICell) {\n    let align\n    align = props.column.align === 'center' ? alignCenter : align\n    align = props.column.align === 'right' ? alignRight : align\n    return <td\n        key={props.column.key + props.rowIndex}\n        className={cn(styles.Cell, { [styles.Index]: props.column.type === 'index' })}\n        style={{\n            borderTop: props.rowIndex === 0 ? 'none' : undefined,\n            backgroundColor: props.column.backgroundColor\n        }}\n    >\n        <span className={styles.Label} style={align}>\n            {props.value}\n        </span>\n    </td>\n}\n\nfunction getRandomizedColumns() {\n    const result: IColumn[] = [\n        {\n            key: '#',\n            align: 'center',\n            width: 80,\n            type: 'index',\n            renderer: cellRenderer\n        }\n    ]\n    for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {\n        const colorIndex = Math.floor(Math.random() * colors.length)\n        result.push({\n            key: String.fromCharCode(i),\n            type: 'number',\n            width: 120,\n            renderer: cellRenderer,\n            backgroundColor: i % 2 ? undefined : colors[colorIndex]\n        })\n    }\n    return result\n}\n\nfunction getRandomizedData(rows: number) {\n    let result: any[] = []\n    if (rows < 1000) {\n        result = getRandomBatch(rows)\n    } else {\n        const batch = getRandomBatch(1000)\n        const batches = Math.floor(rows / 1000)\n        const leftover = batch.slice(0, rows % 1000)\n        for (let i = 0; i < batches; i++) {\n            result = result.concat(batch)\n        }\n        result = result.concat(leftover)\n    }\n    result = result.map((item, index) => ({ ...item, '#': index }))\n    return result\n}\n\nfunction getRandomBatch(rows: number) {\n    const batch: Record<string, number>[] =[]\n    const row: Record<string, number> = {}\n    for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {\n        row[String.fromCharCode(i)] = Math.random()\n    }\n    for (let i = 0; i < rows; i++) {\n        const item = { ...row }\n        Object.keys(item).forEach(key => {\n            item[key] = Math.random()\n        })\n        batch.push(item)\n    }\n    return batch\n}\n\nexport default StaticLayoutGridDemo\n","import * as React from 'react'\nimport StaticLayoutGridDemo from './StaticLayoutGrid/StaticLayoutGridDemo'\nimport styles from './Demo.module.css'\n\nfunction Demo() {\n    const [ component, setComponent ] = React.useState('Static Layout Grid')\n    return (\n        <div className={styles.Container}>\n            <div className={styles.Content}>\n                <section className={styles.Section}>\n                    <h4 className={styles.ComponentTitle}>\n                        {component}\n                    </h4>\n                </section>\n                <section className={styles.Section}>\n                    { component === 'Static Layout Grid'\n                        && <StaticLayoutGridDemo  />\n                    }\n                </section>\n            </div>\n        </div>\n    )\n}\n\nexport default Demo\n","import React from 'react';\nimport './App.css';\nimport Demo from './examples/Demo'\n\nfunction App() {\n  return <Demo />\n}\n\nexport default App;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"TextField_Container__2E58g\",\"Label\":\"TextField_Label__2qadw\",\"LabelPlaceholder\":\"TextField_LabelPlaceholder__2v_ZQ\",\"Input\":\"TextField_Input__1G6nK\",\"Underline\":\"TextField_Underline__OwMmj\",\"ActivationIndicator\":\"TextField_ActivationIndicator__ZdNzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"StaticLayoutGridDemo_Controls__21ahJ\",\"TextField\":\"StaticLayoutGridDemo_TextField__2iR_P\",\"Button\":\"StaticLayoutGridDemo_Button__pjavt\",\"Cell\":\"StaticLayoutGridDemo_Cell__3Lh7S\",\"Label\":\"StaticLayoutGridDemo_Label__1BvBb\",\"Index\":\"StaticLayoutGridDemo_Index__2C8kG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"StaticLayoutGridHead_Container__Y3ygK\",\"Table\":\"StaticLayoutGridHead_Table__2UurI\",\"Column\":\"StaticLayoutGridHead_Column__2-iFN\",\"Row\":\"StaticLayoutGridHead_Row__yYu4Q\",\"Label\":\"StaticLayoutGridHead_Label__2jpdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Demo_Container__GiDFO\",\"PageTitle\":\"Demo_PageTitle__1yIkL\",\"ComponentTitle\":\"Demo_ComponentTitle__3nD_O\",\"Content\":\"Demo_Content__2Hxq6\",\"Section\":\"Demo_Section__2vkQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Thumb\":\"ScrollBar_Thumb__1LpaB\",\"Horizontal\":\"ScrollBar_Horizontal__3hl2c\",\"Vertical\":\"ScrollBar_Vertical__2YHKk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"StaticLayoutGridBody_Container__3hPnt\",\"Table\":\"StaticLayoutGridBody_Table__1Kb_O\",\"Row\":\"StaticLayoutGridBody_Row__KQFhk\"};"],"sourceRoot":""}